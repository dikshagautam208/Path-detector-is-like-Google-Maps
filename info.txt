ENV SETTING=============================

1.	Maze will be outlined by the walls
2.	Movements are possible in only 4 directions (N, S, E, W)
3.	Objective is to find the shortest possible path from source to destination cell in the least amount of time possible.
4.	Maze will be generated by an algorithm. No hardcoded maze
5.	Maze dimensions & simulation parameters can be changed from the constants.py file only

MAZE GENERATION=========================

1.	Aldous-Broder method
	It produces uniform spanning trees. But it is one of the least efficient maze generation algorithms out there.
	Pick random cell and mark it as visited. While there are unvisited cells, pick a random neighbour and remove the wall between the current cell and the choosen neighbour & mark this neighbour as visited. The chosen neighbour is made the current cell.

MAZE SOLVING============================

1.	A-star algorithm :-
	It finds the shortest path between source and destination points given there exists a path joining these two points. The reason why this algorithm is the fastest is because it processes nodes with the least "F" value first. 
	F = G + H
	here, G = movement cost from source to given cell
		H = estimated movement cost from given cell to destination
	H is estimated by different heuristics such as Manhattan, Diagonal or Euclidean distance. In this case, we use Manhattan distance
	Manhattan distance => possible movement in 4 directions
	Diagonal distance => possible movement in 8 directions
	Euclidean distance => possible movement in any number of directions
	We maintain 2 lists -> open & closed lists. Open list contains visited successors to be processed. Closed list contains cells whose "F" value has been optimized

REFERENCES==============================

1.	Pathfinding Algorithms Comparison => https://www.youtube.com/watch?v=GC-nBgi9r0U&list=PLCk3e55f7vU3Ivz-OLNHjyH_9RjZN6spc&index=69&t=37s
2.	Maze generation Wiki => https://en.wikipedia.org/wiki/Maze_generation_algorithm
3.	Maze Solving Wiki => https://en.wikipedia.org/wiki/Maze-solving_algorithm